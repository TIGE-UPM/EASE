<?php
	class OutcomesController extends Zend_Controller_Action {
		public $_controllerTitle= "Resultados";
		public function preDispatch(){
			$this->view->title = $this->_controllerTitle;			
			$this->_helper->authHelper();
			$front = Zend_Controller_Front::getInstance();			
			$this->game=$front->getParam('activeGame');//carga el juego actual antes de procesar ninguna acciÃ³n
			$this->company=$front->getParam('activeCompany');
	    }
		function indexAction(){
			$this->view->controllerName='outcomes';
			$this->view->actionName="index";
			$outcomes=new Model_DbTable_Outcomes();
			$round_number=$outcomes->getLatestRoundNumber($this->game['id']);
			if (isset ($this->game['id']) && $round_number){
				$this->view->game=$this->game;
				$this->view->company=$this->company;
				$this->view->round_number=$round_number;				
				$this->view->headTitle($this->view->title, 'PREPEND');
				$games = new Model_DbTable_Games();
				$this->view->companies = $games->getCompaniesInGame($this->game['id']);
				$outcomes->init($this->game['id'],$round_number);
				
				$this->view->games = $games;

				//canales
				$channels=$games->getChannels($this->game['id']);
				$this->view->channels=$channels;
				//productos
				$products=$games->getProducts($this->game['id']);
				$this->view->products=$products;
				//regiones
				$regions=$games->getRegions($this->game['id']);
				$this->view->regions=$regions;
				
				$this->view->outcomes=$outcomes;
				$this->view->outcomes_production_units=$outcomes->getProductionUnits($this->game['id'], $round_number);
				$this->view->outcomes_sales_units=$outcomes->getSalesUnits($this->game['id'], $round_number);
				$this->view->outcomes_prices=$outcomes->getPrices($this->game['id'], $round_number);
				$this->view->outcomes_sales_incomes=$outcomes->getIncomes($this->game['id'], $round_number);
				$this->view->outcomes_stocks_units=$outcomes->getStocksUnits($this->game['id'], $round_number);
				$this->view->outcomes_costs=$outcomes->getCosts($this->game['id'], $round_number);
				$this->view->outcomes_balance_sheet=$outcomes->getBalanceSheet($this->game['id'], $round_number);
				$this->view->prev_outcomes_balance_sheet=0;
				if($round_number>1){
					$this->view->prev_outcomes_balance_sheet=$outcomes->getBalanceSheet($this->game['id'], $round_number-1);
					//echo("CHECK POINT 1: this->view->prev_outcomes_balance_sheet = ".$this->view->prev_outcomes_balance_sheet."<br>");
				}
				$this->view->outcomes_performance=$outcomes->getPerformance($this->game['id'], $round_number);
				$this->view->outcomes_production_messages=$outcomes->getProductionMessages($this->game['id'], $round_number);

				//productos
				$this->view->game_product_availability=$games->getProductsAvailibilityBySomeone($this->game['id'], $round_number);

				//regiones
				//Medias
				$game_media=$games->getMedia($this->game['id']);
				$this->view->media=$game_media;

				//Trademedia
				$trademedia[0]=array('trademedia_number'=>1, 'name'=>'Patrocinio');
				$trademedia[1]=array('trademedia_number'=>2, 'name'=>'PromociÃ³n');
				$this->view->trademedia=$trademedia;

				//Iniciativas. De momento no se usa, para el futuro se podr’a desglosar el coste por cada iniciativa de cada area
				$game_initiatives=$games->getInitiatives($this->game['id']);	
				$game_initiatives_prod=$games->getInitiativesProd($this->game['id']);
				$game_initiatives_hr=$games->getInitiativesHR($this->game['id']);
				$game_initiatives_mkt=$games->getInitiativesMKT($this->game['id']);
				$game_initiatives_det=$games->getInitiativesDET($this->game['id']);
				$this->view->initiativesProd=$game_initiatives_prod;
				$this->view->initiativesHR=$game_initiatives_hr;
				$this->view->initiativesMKT=$game_initiatives_mkt;
				$this->view->initiativesDET=$game_initiatives_det;

				$factories[$this->company['id']]=$games->getFactories($this->game['id'],$this->company['id']);
				$companies_factories[$this->company['id']]=$factories[$this->company['id']];
				$companies_deterioration[$this->company['id']]=$games->getFactoryDeterioration($this->game['id'],$round_number,$this->company['id']);
				$companies_atmosphere[$this->company['id']]=$games->getWorkAtmosphere($this->game['id'],$round_number,$this->company['id']);
				$companies_qualification[$this->company['id']]=$games->getQualificationLevel($this->game['id'],$round_number,$this->company['id']);
				$companies_success[$this->company['id']]=$games->getSuccessProbabilityOutcomes($this->game['id'],$round_number,$this->company['id']);
				$this->view->game_factories=$companies_factories;
				$this->view->deterioration=$companies_deterioration;
				$this->view->atmosphere=$companies_atmosphere;
				$this->view->qualification=$companies_qualification;
				$this->view->success=$companies_success;

				//Estudios de Mercado
				$game_marketResearches_costs=$games->getMarketResearchesCosts($this->game['id']);
				$this->view->researchcosts=$game_marketResearches_costs;

				//I+D+i
				$idiProducts=$games->getIdiProducts($this->game['id']);
				$this->view->idiProducts=$idiProducts;
				
				$this->view->outcomes_market_sizes=$games->getMarketsSizes($this->game['id']);
				//var_dump($this->view->outcomes_market_sizes);

				//$array[$this->company['id']]=$games->getYearAmortization($this->game['id'], $round_number, $this->company['id']);
				//$this->view->amortization_view=$array;
				foreach ($this->view->companies as $company) {
					$array[$company['id']]=$games->getYearAmortization($this->game['id'], $round_number, $company['id']);
				}
				$this->view->amortization_view=$array;
				
				$researches=new Model_DbTable_Decisions_MarketResearches();
				$this->view->market_researches=$researches->getMarketResearchesSolicited($this->game['id'], $this->company['id'], $round_number);

				//$availability_chart=$games->getProductsAvailibilityBySomeone($this->game['id'],$round_number);
				/*foreach ($this->view->products as $product) {
					$product_availability=$this->view->game_product_availability['product_number_'.$product['product_number']];
					if($product_availability==1){
						$products_names['product_number_'.$product['product_number']]=$product['name'];
						foreach ($this->view->regions as $region) {
							$regions_names['region_number_'.$region['region_number']]=$region['name'];							
							foreach ($this->view->channels as $channel) {
								$channels_names['channel_number_'.$channel['channel_number']]=$channel['name'];								
								foreach ($this->view->companies as $company) {								
									$chart['product_number_'.$product['product_number']]['region_number_'.$region['region_number']]['channel_number_'.$channel['channel_number']][$company['id']]=(intval(10000*($games->getRealShare($this->game['id'], $company['id'], $round_number, $product['product_number'], $region['region_number'], $channel['channel_number']))))/10000;
									$names[$company['id']]=$company['name'];
								}
							}							
						}
					}
				}*/


				$markets_names['products']=$products_names;
				$markets_names['regions']=$regions_names;
				$markets_names['channels']=$channels_names;
				/*$this->view->pie_chart=prepareArrayChart($chart);
				$this->view->pie_names=prepareArrayChart($names);
				$this->view->pie_markets=prepareArrayChart($markets_names);*/

				foreach ($this->view->products as $product) {
					foreach ($this->view->regions as $region) {
						foreach ($this->view->channels as $channel) {
							$result=$games->getPriceSituation($this->game['id'],$round_number,$this->company['id'], $product['product_number'], $region['region_number'], $channel['channel_number']);
							$situation['product_number_'.$product['product_number']]['region_number_'.$region['region_number']]['channel_number_'.$channel['channel_number']]=$result['situation'];
							$max['product_number_'.$product['product_number']]['region_number_'.$region['region_number']]['channel_number_'.$channel['channel_number']]=$result['max'];
							$min['product_number_'.$product['product_number']]['region_number_'.$region['region_number']]['channel_number_'.$channel['channel_number']]=$result['min'];						
						}
					}
				}
				$this->view->prices_research=$situation;
				$this->view->prices_max=$max;
				$this->view->prices_min=$min;

				$this->view->mkt_advertising_research=$games->getMktSituation($this->game['id'],$this->view->round_number,$this->company['id']);
				$this->view->mkt_trade_research=$games->getTradeSituation($this->game['id'],$this->view->round_number,$this->company['id']);

				$this->view->lastFactory=$games->getLastFactory($this->game['id'], $this->company['id']);
				$this->view->roundFactory=$games->getRoundFactoryCreated($this->game['id'], $this->company['id']);
			}	
		}
		function historyAction(){
			$this->view->title .= " / HistÃ³rico.";			
			$this->view->controllerName='outcomes';
			$this->view->actionName="history";	
			
			$outcomes=new Model_DbTable_Outcomes();
			$this->view->outcomes=$outcomes->getPastOutcomes($this->game['id']);
			$this->view->last_round=$outcomes->getLatestRoundNumber($this->game['id']);						
		}
		function viewAction(){
			$this->view->controllerName='outcomes';
			$this->view->actionName="index";
			$outcomes=new Model_DbTable_Outcomes();
			$round_number=$_GET['round_number'];
			if (isset ($this->game['id']) && $round_number){
				$this->view->game=$this->game;
				$this->view->company=$this->company;
				$this->view->round_number=$round_number;				
				$this->view->headTitle($this->view->title, 'PREPEND');
				$games = new Model_DbTable_Games();
				$this->view->companies = $games->getCompaniesInGame($this->game['id']);
				$outcomes->init($this->game['id'],$round_number);
				
				$this->view->games = $games;
				//canales
				$channels=$games->getChannels($this->game['id']);
				$this->view->channels=$channels;
				//productos
				$products=$games->getProducts($this->game['id']);
				$this->view->products=$products;
				//regiones
				$regions=$games->getRegions($this->game['id']);
				$this->view->regions=$regions;

				$this->view->outcomes=$outcomes;
				$this->view->outcomes_production_units=$outcomes->getProductionUnits($this->game['id'], $round_number);
				$this->view->outcomes_sales_units=$outcomes->getSalesUnits($this->game['id'], $round_number);
				$this->view->outcomes_prices=$outcomes->getPrices($this->game['id'], $round_number);
				$this->view->outcomes_sales_incomes=$outcomes->getIncomes($this->game['id'], $round_number);
				$this->view->outcomes_stocks_units=$outcomes->getStocksUnits($this->game['id'], $round_number);
				$this->view->outcomes_costs=$outcomes->getCosts($this->game['id'], $round_number);
				$this->view->outcomes_balance_sheet=$outcomes->getBalanceSheet($this->game['id'], $round_number);
				$this->view->prev_outcomes_balance_sheet=0;
				if($round_number>1){
					$this->view->prev_outcomes_balance_sheet=$outcomes->getBalanceSheet($this->game['id'], $round_number-1);
					//echo("CHECK POINT 1: this->view->prev_outcomes_balance_sheet = ".$this->view->prev_outcomes_balance_sheet."<br>");
				}
				$this->view->outcomes_performance=$outcomes->getPerformance($this->game['id'], $round_number);
				$this->view->outcomes_production_messages=$outcomes->getProductionMessages($this->game['id'], $round_number);

				//productos
				$this->view->game_product_availability=$games->getProductsAvailibilityBySomeone($this->game['id'], $round_number);

				//Medias
				$game_media=$games->getMedia($this->game['id']);
				$this->view->media=$game_media;

				//Trademedia
				$trademedia[0]=array('trademedia_number'=>1, 'name'=>'Patrocinio');
				$trademedia[1]=array('trademedia_number'=>2, 'name'=>'PromociÃ³n');
				$this->view->trademedia=$trademedia;

				//Iniciativas. De momento no se usa, para el futuro se podr’a desglosar el coste por cada iniciativa de cada area
				$game_initiatives=$games->getInitiatives($this->game['id']);	
				$game_initiatives_prod=$games->getInitiativesProd($this->game['id']);
				$game_initiatives_hr=$games->getInitiativesHR($this->game['id']);
				$game_initiatives_mkt=$games->getInitiativesMKT($this->game['id']);
				$game_initiatives_det=$games->getInitiativesDET($this->game['id']);
				$this->view->initiativesProd=$game_initiatives_prod;
				$this->view->initiativesHR=$game_initiatives_hr;
				$this->view->initiativesMKT=$game_initiatives_mkt;
				$this->view->initiativesDET=$game_initiatives_det;
				
				$factories[$this->company['id']]=$games->getFactories($this->game['id'],$this->company['id']);
				$companies_factories[$this->company['id']]=$factories[$this->company['id']];
				$companies_deterioration[$this->company['id']]=$games->getFactoryDeterioration($this->game['id'],$round_number,$this->company['id']);
				$companies_atmosphere[$this->company['id']]=$games->getWorkAtmosphere($this->game['id'],$round_number,$this->company['id']);
				$companies_qualification[$this->company['id']]=$games->getQualificationLevel($this->game['id'],$round_number,$this->company['id']);
				$companies_success[$this->company['id']]=$games->getSuccessProbabilityOutcomes($this->game['id'],$round_number,$this->company['id']);
					
				$this->view->game_factories=$companies_factories;
				$this->view->deterioration=$companies_deterioration;
				$this->view->atmosphere=$companies_atmosphere;
				$this->view->qualification=$companies_qualification;
				$this->view->success=$companies_success;

				//Estudios de Mercado
				$game_marketResearches_costs=$games->getMarketResearchesCosts($this->game['id']);
				$this->view->researchcosts=$game_marketResearches_costs;

				//I+D+i
				$idiProducts=$games->getIdiProducts($this->game['id']);
				$this->view->idiProducts=$idiProducts;
				
				$this->view->outcomes_market_sizes=$games->getMarketsSizes($this->game['id']);
				//var_dump($this->view->outcomes_market_sizes);die();

				//$array[$this->company['id']]=$games->getYearAmortization($this->game['id'], $round_number, $this->company['id']);
				//$this->view->amortization_view=$array;
				foreach ($this->view->companies as $company) {
					$array[$company['id']]=$games->getYearAmortization($this->game['id'], $round_number, $this->company['id']);
				}
				$this->view->amortization_view=$array;
				
				$researches=new Model_DbTable_Decisions_MarketResearches();
				$this->view->market_researches=$researches->getMarketResearchesSolicited($this->game['id'], $this->company['id'], $round_number);
				
				/*foreach ($this->view->products as $product) {
					$product_availability=$this->view->game_product_availability['product_number_'.$product['product_number']];
					if($product_availability==1){
						$products_names['product_number_'.$product['product_number']]=$product['name'];
						foreach ($this->view->regions as $region) {
							$regions_names['region_number_'.$region['region_number']]=$region['name'];
							foreach ($this->view->channels as $channel) {
								$channels_names['channel_number_'.$channel['channel_number']]=$channel['name'];								
								foreach ($this->view->companies as $company) {
									$names[$company['id']]=$company['name'];
									$chart['product_number_'.$product['product_number']]['region_number_'.$region['region_number']]['channel_number_'.$channel['channel_number']][$company['id']]=(intval(10000*($games->getRealShare($this->game['id'], $company['id'], $round_number, $product['product_number'], $region['region_number'], $channel['channel_number']))))/10000;
								}
							}							
						}
					}
				}*/

				$markets_names['products']=$products_names;
				$markets_names['regions']=$regions_names;
				$markets_names['channels']=$channels_names;

				/*$this->view->pie_chart=prepareArrayChart($chart);
				$this->view->pie_names=prepareArrayChart($names);
				$this->view->pie_markets=prepareArrayChart($markets_names);*/
				
				foreach ($this->view->products as $product) {
					foreach ($this->view->regions as $region) {
						foreach ($this->view->channels as $channel) {
							$result=$games->getPriceSituation($this->game['id'],$round_number,$this->company['id'], $product['product_number'], $region['region_number'], $channel['channel_number']);
							$situation['product_number_'.$product['product_number']]['region_number_'.$region['region_number']]['channel_number_'.$channel['channel_number']]=$result['situation'];
							$max['product_number_'.$product['product_number']]['region_number_'.$region['region_number']]['channel_number_'.$channel['channel_number']]=$result['max'];
							$min['product_number_'.$product['product_number']]['region_number_'.$region['region_number']]['channel_number_'.$channel['channel_number']]=$result['min'];												}
					}
				}

				$this->view->prices_research=$situation;
				$this->view->prices_max=$max;
				$this->view->prices_min=$min;
				
				$this->view->mkt_advertising_research=$games->getMktSituation($this->game['id'],$round_number,$this->company['id']);
				$this->view->mkt_trade_research=$games->getTradeSituation($this->game['id'],$round_number,$this->company['id']);
				
				$this->view->lastFactory=$games->getLastFactory($this->game['id'], $this->company['id']);
				$this->view->roundFactory=$games->getRoundFactoryCreated($this->game['id'], $this->company['id']);
			}
		}
	}
	function prepareArrayChart($chart) {
		$tmp = serialize($chart);
		$tmp = urlencode($chart);
		return $tmp;
	}	
	
?>